using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

public class AIAttack : MonoBehaviour
{
    public float attackRange = 2f;
    public float attackCooldown = 1.5f;
    public int attackDamage = 10;
    public float moveAnimationThreshold = 0.1f;

    public bool canAttack = true;
    private PlayerHealth playerHealth;
    private Animator zombieAnimator;
    private NavMeshAgent agent;
    public AudioClip attackAudioClip;
    private AudioSource audioSource;

    // Start is called before the first frame update
    void Start()
    {
        playerHealth = GameObject.FindWithTag("Player").GetComponent<PlayerHealth>();
        zombieAnimator = GetComponent<Animator>();
        agent = GetComponent<NavMeshAgent>();

        audioSource = gameObject.AddComponent<AudioSource>();
        audioSource.clip = attackAudioClip;

    }

    // Update is called once per frame
    void Update()
    {
        if (CanAttackPlayer())
        {
            StartCoroutine(AttackPlayer());
        }
    }

    bool CanAttackPlayer()
    {
        if(playerHealth != null)
        {
            if (!playerHealth.IsInvincible())
            {
                float distanceToPlayer = Vector3.Distance(transform.position, playerHealth.transform.position);
                return distanceToPlayer <= attackRange && canAttack;
            }
        }
        return false;
    }
    
    IEnumerator AttackPlayer()
    {
        canAttack = false;
        agent.isStopped = true;
        zombieAnimator.SetTrigger("Attack1");
        zombieAnimator.SetBool("isAttacking", true);
        zombieAnimator.SetBool("isRunning", false);
        if(attackAudioClip != null)
        {
            audioSource.PlayOneShot(attackAudioClip);
        }
        yield return new WaitForSeconds(0.5f);
        playerHealth.TakeDamage(attackDamage);

        zombieAnimator.SetTrigger("Attack1");
        yield return new WaitForSeconds(0.5f);
        playerHealth.TakeDamage(attackDamage);
        StartCoroutine(AttackCooldown());
    }
    IEnumerator AttackCooldown()
    {
        yield return new WaitForSeconds(attackCooldown);
        zombieAnimator.ResetTrigger("Attack1");
        zombieAnimator.SetBool("isAttacking", false);
        zombieAnimator.SetBool("isRunning", true);
        agent.isStopped = false;
        canAttack = true;
    }
}
