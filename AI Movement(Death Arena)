using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

public class AiMovement : MonoBehaviour
{
    public float roamRadius = 10f;
    public float roamInterval = 5f;
    public float rotationSpeed = 5f;
    public float minDistanceBetweenPoints = 2f;
    public LayerMask playerLayer;
    public float detectionRadius = 10f;
    public float chaseSpeed = 2f;

    private NavMeshAgent agent;
    private float originalSpeed;
    private float timer;
    private Animator animator;
    private const float speedThreshold = 0.1f;
    private List<Vector3> visitedPositions = new List<Vector3>();
    public AudioClip zombieScreamClip;
    private AudioSource audioSource;

    // Start is called before the first frame update
    void Start()
    {
        agent = GetComponent<NavMeshAgent>();
        timer = roamInterval;
        originalSpeed = agent.speed;
        animator = GetComponent<Animator>();
        audioSource = GetComponent<AudioSource>();

        Roam();         
    }

    // Update is called once per frame
    void Update()
    {
        GameObject player = GameObject.FindWithTag("Player");

        if(player!= null)
        {
            if (CanSeePlayer(player))
            {
                agent.speed = chaseSpeed;
                agent.SetDestination(player.transform.position);

                animator.SetBool("isRunning", true);
                if (audioSource.clip != zombieScreamClip ||!audioSource.isPlaying)
                {
                    audioSource.Stop();
                    audioSource.clip = zombieScreamClip;
                    audioSource.Play();
                }
                
            }
            else
            {
                agent.speed = originalSpeed;
                timer -= Time.deltaTime;
                animator.SetBool("isRunning", false);
                

                if (timer <= 0f)
                {
                    Roam();
                    timer = roamInterval;
                }
                SmoothRotation();
            }
        }
       
    }

    bool CanSeePlayer(GameObject player)
    {
        if(player != null)
        {
            Collider[] hitColliders = Physics.OverlapSphere(transform.position, detectionRadius, playerLayer);
            foreach(Collider collider in hitColliders)
            {
                if (collider.gameObject == player)
                {
                    return true;
                }
            }
        }
        return false;
    }

    void Roam()
    {
    
        Vector3 randomDirection = Random.insideUnitSphere * roamRadius;
        randomDirection += transform.position;

        NavMeshHit hit;
        NavMesh.SamplePosition(randomDirection, out hit, roamRadius, 1);

        Vector3 finalPosition = hit.position;

        while (IsTooCloseToVisited(finalPosition))
        {
            randomDirection = Random.insideUnitSphere * roamRadius;
            randomDirection += transform.position;

            NavMesh.SamplePosition(randomDirection, out hit, roamRadius, 1);
            finalPosition = hit.position;
        }
        visitedPositions.Add(finalPosition);
        if(visitedPositions.Count > 5)
        {
            visitedPositions.RemoveAt(0);
        }
        agent.SetDestination(finalPosition);

        if (!audioSource.isPlaying)
        {
            audioSource.Play();
        }
    }
    bool IsTooCloseToVisited(Vector3 position)
    {
        foreach(Vector3 visitedPos in visitedPositions)
        {
            if(Vector3.Distance(position,visitedPos) < minDistanceBetweenPoints)
            {
                return true;
            }
        }
        return false;
    }


    void SmoothRotation()
    {
        Vector3 desiredDir = (agent.steeringTarget - transform.position).normalized;
        Quaternion lookRotation = Quaternion.LookRotation(desiredDir, Vector3.up);
        transform.rotation = Quaternion.Slerp(transform.rotation, lookRotation, rotationSpeed * Time.deltaTime);
    }
}
