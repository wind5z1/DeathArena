using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using EvolveGames;

public class PlayerHealth : MonoBehaviour
{
    public int maxHealth = 100;
    private int currentHealth;
    public int healAmountPerSecond = 5;
    public Slider healthSlider;
    public GameObject deathPanel;

    public delegate void HealthChangedDelegate(int newHealth);
    public event HealthChangedDelegate OnHealthChanged;

    public delegate void PlayerDeathDelegate();
    public event PlayerDeathDelegate OnPlayerDeath;
    public PlayerController playercontrollerScript;
    public AudioSource encounterAudio;
    public AudioSource unencounterAudio;
    private bool isInvincible = false;

    // Start is called before the first frame update
    void Start()
    {
        currentHealth = maxHealth;
        UpdateHealthUI();
        deathPanel.SetActive(false);

        StartCoroutine(AutoHeal());
    }

    private IEnumerator AutoHeal()
    {
        while (true)
        {
            currentHealth = Mathf.Min(currentHealth + healAmountPerSecond, maxHealth);
            UpdateHealthUI();
            yield return new WaitForSeconds(10f);
        }
    }

    public void TakeDamage(int damageAmount)
    {
        currentHealth -= damageAmount;
        UpdateHealthUI();
        if(currentHealth <= 0)
        {
            Die();
        }
    }

    public void StartShortinvincibility()
    {
        StartCoroutine(ShortInvincibilityTimer());
    }

    public bool IsInvincible()
    {
        return isInvincible;
    }

    private IEnumerator ShortInvincibilityTimer()
    {
        Debug.Log("Immuniting ");
        isInvincible = true;
        yield return new WaitForSeconds(5f);
        Debug.Log("Immuniting end ");
        isInvincible = false;
    }

    public void Heal(int healAmount)
    {
        currentHealth = Mathf.Min(currentHealth + healAmount, maxHealth);
        UpdateHealthUI();
    }

    void Die()
    {
        OnPlayerDeath?.Invoke();
        playercontrollerScript.enabled = false;
        encounterAudio.Stop();
        unencounterAudio.Stop();
        Animator animator = deathPanel.GetComponent<Animator>();
        deathPanel.SetActive(true);
        Cursor.lockState = CursorLockMode.None;
        Cursor.visible = true;

        if (animator != null)
        {
            StartCoroutine(WaitForAnimationAndPause(animator));
        }
        else
        {
            Time.timeScale = 0;
        }
    }
    IEnumerator WaitForAnimationAndPause(Animator animator)
    {
        yield return new WaitForSeconds(animator.GetCurrentAnimatorStateInfo(0).length);
        Time.timeScale = 0;
    }

    private void UpdateHealthUI()
    {

        if(healthSlider != null)
        {
            healthSlider.value = (float)currentHealth / maxHealth;
        }

        OnHealthChanged?.Invoke(currentHealth);
    }
    public int GetCurrentHealth()
    {
        return currentHealth;
    }
}
