using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;

public class Shooting : MonoBehaviour
{
    public GameObject bulletPrefab;
    public Transform muzzleTransform;
    public float bulletSpeed = 20f;
    public float shootCooldown = 0.1f;
    public int maxBullets = 20;
    private int remainingBullets;
    public bool canShoot = true;
    public bool isReloading = false;
    public ParticleSystem muzzleFlashParticleSystem;
    public ParticleSystem muzzleFlashParticleSystem1;
    private float lastShotTime = 0f;
    public static Shooting Instance;
    public AudioSource gunSound;
    public AudioSource reloadSound;
    public AudioSource emptyreloadSound;

    public TextMeshProUGUI bulletsText;
    public TextMeshProUGUI gunNameText;
    private int bulletsToReload = 10;
   

    private void Awake()
    {
        canShoot = true;
    }

    private void Start()
    {
        Instance = this;
        remainingBullets = maxBullets;
        UpdateBulletsText();

        gunNameText.text = "Assault Riffle";
        gunNameText.gameObject.SetActive(true);
    }

    void UpdateBulletsText()
    {
        int displayBullets = remainingBullets;
        bulletsText.text = "Bullets: " + displayBullets + "/" + maxBullets;
    }

    public void AddBullets(int bulletCount)
    {
        maxBullets += bulletCount;
        UpdateBulletsText();
    }
    // Update is called once per frame
    void Update()
    {
        if (Input.GetMouseButton(0) && canShoot && Time.time - lastShotTime > shootCooldown)
        {
           
           if(remainingBullets > 0)
            {
                Shoot();
                remainingBullets--;
                UpdateBulletsText();

                lastShotTime = Time.time;
            }
            else
            {
                if (!isReloading)
                {
                    StartCoroutine(Reload());
                }
            }
        }

        if(Input.GetKeyDown(KeyCode.R) && !canShoot)
        {
            StartCoroutine(Reload());
        }
     
    }

    void Shoot()
    {
        if(canShoot && remainingBullets > 0)
        {
            GameObject bullet = Instantiate(bulletPrefab, muzzleTransform.position, muzzleTransform.rotation);

            Rigidbody bulletRb = bullet.GetComponent<Rigidbody>();
            if (bulletRb != null)
            {
                bulletRb.velocity = bullet.transform.forward * bulletSpeed;
                GameManager.Instance.UpdateRecoil();
                muzzleFlashParticleSystem.Play();
                muzzleFlashParticleSystem1.Play();

                if(gunSound != null)
                {
                    gunSound.Play();
                }
            }

            bullet.AddComponent<BulletCollisionHandler>();
        }
       
    }
    IEnumerator Reload()
    {
        if (isReloading)
        {
            yield break;
        }
        isReloading = true;
        canShoot = false;

        if(maxBullets > 0 && reloadSound != null)
        {
            reloadSound.Play();
        }

        if(maxBullets == 0 && emptyreloadSound != null)
        {
            emptyreloadSound.Play();
        }

        if (remainingBullets < maxBullets)
        {
            int reloadBullets = Mathf.Min(bulletsToReload, maxBullets - remainingBullets);
            yield return new WaitForSeconds(3f);
            if (maxBullets - reloadBullets >= 0)
            {
                maxBullets -= reloadBullets;
                remainingBullets += reloadBullets;
                UpdateBulletsText();
            }
            else
            {
                remainingBullets += Mathf.Min(bulletsToReload, maxBullets);
            }
        }
        isReloading = false;
        canShoot = true;
    }

    public void SetBulletTextActive(bool isActive)
    {
        if (bulletsText != null)
        {
            bulletsText.gameObject.SetActive(isActive);
        }
    }
   
}
