using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;

public class Shotgun : MonoBehaviour
{
    public Transform firePoint;
    public GameObject bulletPrefab;
    public int pelletsCount = 0;
    public float spreadAngle = 3f;
    public float timebetweenShots = 1f;
    public float bulletSpeed = 20f;
    public TextMeshProUGUI bulletText;
    public Shooting shootingScript;

    private float elapsedTime = 0f;
    private int remainingBullets = 5;
    public bool canShoot = true;
    public bool isReloading = false;
    private int bulletsToReload = 5;
    public static Shotgun Instance;
    public ParticleSystem muzzleFlashParticleSystem1;
    public AudioSource gunSound;
    public AudioSource reloadSound;
    public AudioSource emptyreloadSound;
    public TextMeshProUGUI gunNameText;

    private void Awake()
    {
        canShoot = true;
    }

    private void Start()
    {
        Instance = this;
        UpdateBulletText();
        shootingScript.SetBulletTextActive(false);
        gunNameText.text = "Shotgun";
        gunNameText.gameObject.SetActive(false);

    }

    // Update is called once per frame
    void Update()
    {
        elapsedTime += Time.deltaTime;

        if(Input.GetButtonDown("Fire1") && elapsedTime >= timebetweenShots && canShoot)
        {
            if(remainingBullets > 0)
            {
                Shoot();
                elapsedTime = 0f;
                remainingBullets--;
                UpdateBulletText();
            }
            else
            {
                if (!isReloading)
                {
                    StartCoroutine(Reload());
                }
            }
           
        }

        if(Input.GetKeyDown(KeyCode.R) && !canShoot)
        {
            StartCoroutine(Reload());
        }
   
    }

    public void AddBullets(int bulletCount)
    {
        pelletsCount += bulletCount;
        UpdateBulletText();

    }

    void Shoot()
    {
        for(int i = 0;i < remainingBullets; i++)
        {
            if (canShoot)
            {
                float angle = Random.Range(-spreadAngle, spreadAngle);

                GameObject bullet = Instantiate(bulletPrefab, firePoint.position, firePoint.rotation);
                bullet.transform.Rotate(Vector3.up, angle);

                Rigidbody bulletRb = bullet.GetComponent<Rigidbody>();
                bulletRb.AddForce(bullet.transform.forward * 10f, ForceMode.Impulse);

                if (bulletRb != null)
                {
                    bulletRb.velocity = bullet.transform.forward * bulletSpeed;
                    muzzleFlashParticleSystem1.Play();
                    GameManager.Instance.UpdateRecoil();
                    if (gunSound != null)
                    {
                        gunSound.Play();
                    }
                }
                bullet.AddComponent<BulletCollisionHandler>();
            }

        }
    }

    void UpdateBulletText()
    {
        if(bulletText != null)
        {
            int displayBullets = remainingBullets;
            bulletText.text = "Shotgun Bullets: " + displayBullets + "/" + pelletsCount;
        }
    }

    public void SetBulletTextActive(bool isActive)
    {
        if(bulletText != null)
        {
            bulletText.gameObject.SetActive(isActive);
        }
    }

    IEnumerator Reload()
    {
        if (isReloading)
        {
            yield break;
        }
        isReloading = true;
        canShoot = false;

        if (pelletsCount > 0 && reloadSound != null)
        {
            reloadSound.Play();
        }

        if (pelletsCount == 0 && emptyreloadSound != null)
        {
            emptyreloadSound.Play();
        }


        if (remainingBullets < pelletsCount)
        {
            int reloadBullets = Mathf.Min(bulletsToReload, pelletsCount - remainingBullets);
            yield return new WaitForSeconds(2f);
            if (pelletsCount - reloadBullets >= 0)
            {
                pelletsCount -= reloadBullets;
                remainingBullets += reloadBullets;
                UpdateBulletText();
            }
            else
            {
                remainingBullets += Mathf.Min(bulletsToReload, pelletsCount);
            }
        }
        isReloading = false;
        canShoot = true;
    }
  
}
